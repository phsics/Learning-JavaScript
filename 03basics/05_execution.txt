Javascript Execution Context

{} -> Global Execution Context
Function Execution Context
Eval Execution Context

{} -> Memory Creation Phase
Execution Phase

Code Snippet:

            let val1 = 10
            let val2 = 5
            function addNum(num1,num2){
                let total = num1 + num2
                return total
            }
            let result1 = addNum(val1, val2)
            let result2 = addNum(10, 2)

(1) Global Execution: this keyword

(2) Memory Phase:

val1 -> undefined
val2 -> undefined
addNum -> definition
result1 -> undefined
result2 -> undefined

(3) Execution Phase

val1 <- 10
val2 <- 5
result1 = addNum <- (new variable enviroment + Execution thread)
                ||
                \/
        (1)  Memory Phase:                        (2)  Execution Context
            val1 -> undefined                           num1 <- 10
            val2 -> undefined                           num2 <- 5
            total -> undefined                          total <- 15 : return to Global Execution Context 

            deleted

result = 15
result2 = (new variable enviroment + Execution thread)
                        ||
                        \/
            (1)  Memory Phase:                        (2)  Execution Context
            val1 -> undefined                           num1 <- 10
            val2 -> undefined                           num2 <- 2
            total -> undefined                          total <- 12 : return to Global Execution Context 

            deleted

Callstack: 

Last In First Out
___________
|         |
|         |
|         |
|         |
|         |
|_________|
            




