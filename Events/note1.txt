-> Javascript
    -> synchronous: code is executed one after other
    -> single threaded

-> Execution Context
    -> execute one line of code at a time
    -> each operation waits for the last one to complete before executing
    -> console log - 1
    -> console log - 2
    -> Call Stack 
    -> Memory Heap

-> Blocking Code
    -> Block the flow of Program
    -> Read File Sync

-> Non Blocking Code
    -> Does not block execution
    -> Read file async

-> We can't say that non blocking code is good 
-> because it depends on usecases

-> JS Engine
    -> Memory Heap
    -> Call Stack
        -> fn -----        -> Web API
        -> fn     |        -> DOM API 
        -> fn     -------- -> Set timeout-------------------
        -> Global  (call)  -> Set interval                 |
            ^  ^           -> fetch()----------            | 
            |  |                               |           V
            |  |(High Priority)    (Promise)   |         Register 
            |  |                               |         Call Back
(Add to     |  ---   -> CB   -> CB   <---------             |
call stack) |                                               |
            |                                               |
            |                                               |
            ----    ->  CB   -> CB      <-------------------  
                    => Task Queue
                    Event Loop